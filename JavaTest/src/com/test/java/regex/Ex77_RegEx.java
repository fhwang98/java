package com.test.java.regex;

public class Ex77_RegEx {

	public static void main(String[] args) {

		/*
			정규표현식, Regular Expression
			- 특정한 패턴(규칙)을 가지는 문자열의 집합을 표현하는 식
			- 특정한 패턴(규칙)을 가지는 문자열을 검색하는 용도
			- 자바(X)
			- 대다수 환경/프로그래밍 언어 등에서 지원
			
			- ex) 안녕하세요. 제 연락처는 010-1234-5678입니다. 이 번호로 연락이 안되면 010-9876-5432로 연락주세요. > 전화번호 추출 > 일정 패턴 > 010-XXXX-XXXX
			
			- ex) 주민등록번호 > 951010-2010101
			- ex) 이메일 주소 > test@test.com
	
			
			
			정규표현식 구성요소
			
			1. x
				-x의 임의의 1개 문자
				ex) "a" > a
				ex) "abc" > abc 
			
			2. 출현 횟수
				- 바로 앞의 문자(집합)의 출현 횟수를 지정
				
				2.1 생략
					- 바로 앞의 대상의 출현 횟수가 1
					- 생략 X, 중복 X
					ex) "a?bc"
					
				2.2 ?
					- 바로 앞의 대상의 출현 횟수가 0~1
					- 생략 O, 중복 X
					ex) "a?bc" > abc(O), bc(O), ac(X), aabc(O), bbbc(O)
					ex) "a?b?c" > abc(O), ac(O), bc(O), c(O)
					ex) "홍?길동아?" > 안녕~ 홍길동~ 잘가~ 길동아~
					ex) "자바?코드" > 자바코드가 있습니다. 그런데 코드에 에러가 있어요. > 자바코드, 자코드 찾아줌
					ex) "(자바)?코드" > 자바코드가 있습니다. 그런데 코드에 에러가 있어요. > 자바코드, 코드 찾아줌
				
				2.3 +
					- 바로 앞의 대상의 출현 횟수가 1~무한대
					- 생략 X, 중복 O
					ex) "a+bc" > abc, aabc, aaaabc, aaaaaaaabc / bc(X)
					ex) "홍+길동" > 안녕~ 홍홍홍홍홍길동~ 잘가~ 길동아~
					ex) "(자바)+코드" > 자바코드가 있습니다. 자바자바코드, 자바자바자바코드, 그런데 코드에 에러가 있어요. > 자바코드, 자바자바코드, 자바자바자바코드 (O) / 코드(X)
				
				2.4 *
					- 바로 앞의 대상의 출현 횟수가 0~무한대
					- 생략 O, 중복 O
					ex) "a*bc" > bc, abc, aabc, aaaaaaaaaaaaaaaabc
			
			
			3. 선택, choice
			
				- 열거값 중 하나가 나오는 패턴
				
				3.1 [열거값]
					ex) "[12]" > 제 나이는 12살입니다. 우리 형은 21살입니다.
						[1 or 2]
					ex) "[0123456789]" > 모든 숫자(한자리)
					ex) "[13579]" > 홀수만(한자리)
				
					ex) "[0123456789][0123456789][0123456789]" 세자리 숫자
					
					ex) "[0123456789]+"
				
					ex) 주민등록번호 > 
					"[0123456789][0123456789][0123456789][0123456789][0123456789][0123456789]-[0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789]"
					951010-2098765
					
					ex) 전화번호 010-XXXX-XXXX
					"010-[0123456789]?[0123456789][0123456789][0123456789]-[0123456789][0123456789][0123456789][0123456789]"
					
					010-1234-5678
					010-555-5555
					019-1234-1234
					02-2345-0987
					010-9878-7433
					
					ex) 영어 소문자 > "[abcdefghijklmnopqrstuvwxyz]+"
					ex) 영어 대문자 > "[ABCDEFGHIJKLMNOPQRSTUVWXYZ]+"
					ex) 영문자 > "[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]+"
					
					
					*** 선택에서 연속된 문자를 간단히 표현하는 방법
						- 문자코드 활용
						
					ex) 숫자 > "[0123456789]" > "[0-9]"
					ex) 영어 소문자 > "[abcdefghijklmnopqrstuvwxyz]" > "[a-z]"
					ex) 영어 대문자 > "[ABCDEFGHIJKLMNOPQRSTUVWXYZ]" > "[A-Z]"
					ex) 영문자 > "[A-Za-z]"
					ex) 한글 > "[가-힣]"
					ex) 영문자 + 숫자 > "[A-Za-z0-9]"
					ex) 영문자 + 숫자 + 한글 > "[A-Za-z0-9가-힣]"
					
					ex) 식별자로 적합한 문자 > "[A-Za-z0-9_]"
					
					ex) 전화번호 > "010-[0-9]?[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]"
					ex) '홍'씨 사람 이름? > "홍[가-힣][가-힣]?"
					
						홍길동
						홍순신
						홍뭐뭐
						홍민
					
				3.2 [^열거값]
					ex) "[^0-9]+" > 숫자를 제외한 나머지 모든 문자
			
			4. 출현횟수
				- 바로 앞의 문자(집합)의 출현 횟수를 지정
				- ?, +, * > 이것들보다 더 세밀한 패턴 지정이 가능
			
				4.1 {n}
					- n: 출현 횟수
					ex) "a{1}bc" > abc
					ex) "a{2}bc" > aabc
					ex) "a{3}bc" > aaabc
					
				4.2 {n,m}
					- n: 최소 출현 횟수
					- m: 최대 출현 횟수
					ex) "a{1,2}bc" > abc, aabc
					ex) "a{3,5}bc" > aaabc, aaaabc, aaaaabc
					ex) "a{0,1}bc" > bc, abc > "a?bc"
				
				4.3 {n,}
					- n: 최소 출현횟수
					- 최대 출현횟수 > 무한대
					ex) "a{2,}bc > aabc, aaabc, aaaaaaaaaaaabc
				
				
				ex) 주민등록번호
					"[0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
					"[0-9]{6}-[0-9]{7}"
				
				ex) 전화번호
					"010-[0-9]{3,4}-[0-9]{4}"
				
				ex) 한글 2~4자
					"[가-힣]{2,4}"
					
				ex) 영문자 5이상
					"[A-Za-z]{5,}"
					
				ex) 영문자 5자 이상 + 첫문자 대문자(파스칼)
					"[A-Z][A-Za-z]{4,}"
				
				ex) 수업 > 클래스명
					"[A-Z][A-Za-z0-9_]{1,}"
				
				
			5. 처음과 끝
			
				5.1 ^
					- 대상이 뒤의 표현으로 시작
					- str.startsWith("홍길동")
					- "^홍길동"
					
				5.2 $
					- 대상이 앞의 표현으로 끝
					- str.endsWith("홍길동")
					- "홍길동$"
			
			
			6. 줄임표현
			
				6.1 \d or \D
					- Digital > 숫자
					- "[0-9]" == "\d"
					- "[^0-9]" == "\D"
				
					ex) "010-\d{3,4}-\d{4}"
				
				6.2 \w or \W
					- Word > 영어대소문자 + 숫자 + _
					- "[A-Za-z0-9_]" == "\w"
				
				6.3 \s or \S
					- 공백문자(스페이스, 탭, 엔터)
					
					ex) "\s{2}홍길동\s{2}"
					ex) "\s{1,}홍길동"
					
					이름 홍길동 님
					이름  홍길동  님
					홍길동입니다
					이름홍길동님
				
		*/

		
		
		
	}

}
